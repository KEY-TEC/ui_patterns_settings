<?php

/**
 * @file
 * Contains ui_patterns_settings.module.
 */

use Drupal\ui_patterns_settings\Plugin\PatternSettingTypeBase;
use Drupal\ui_patterns_settings\Plugin\Layout\PatternSettingsLayout;
use Drupal\ui_patterns_settings\UiPatternsSettings;
use Drupal\ui_patterns\UiPatterns;
use Drupal\ui_patterns\Definition\PatternDefinition;
use Drupal\ui_patterns_settings\Form\SettingsFormBuilder;
use Drupal\Core\Form\FormStateInterface;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_ui_patterns_layouts_display_settings_form_alter().
 */
function ui_patterns_settings_ui_patterns_layouts_display_settings_form_alter(&$form, PatternDefinition $definition, $configuration) {
  SettingsFormBuilder::layoutForm($form, $definition, $configuration);
}

/**
 * Implements hook_ui_patterns_display_form_alter().
 */
function ui_patterns_settings_ui_patterns_display_settings_form_alter(array &$form, $configuration) {
  SettingsFormBuilder::displayForm($form, $configuration);
}

/**
 * Preprocess hook.
 *
 * @param array $variables
 *   Theme variables.
 */
function ui_patterns_settings_preprocess_field__pattern_ds_field_template(array &$variables) {
  $pattern_id = $variables['ds-config']['settings']['pattern'];
  $settings = isset($variables['ds-config']['settings']['pattern_settings'][$pattern_id]) ? $variables['ds-config']['settings']['pattern_settings'][$pattern_id] : NULL;
  foreach ($variables['items'] as $delta => $item) {
    $variables['pattern']['pattern_' . $delta]['#settings'] = $settings;
  }
}

/**
 * Preprocess variables for the pattern_views_row theme hook.
 *
 * @param array $variables
 *   Theme variables.
 */
function ui_patterns_settings_preprocess_pattern_views_row(array &$variables) {
  $pattern_id = $variables['options']['pattern'];
  $settings = isset($variables['options']['pattern_settings'][$pattern_id]) ? $variables['options']['pattern_settings'][$pattern_id] : NULL;
  $variables['pattern']['#settings'] = $settings;
}

/**
 * Implements hook_element_info_alter().
 */
function ui_patterns_settings_element_info_alter(array &$info) {

  foreach ($info as &$elm) {
    if (isset($elm['#process'])) {
      array_unshift($elm['#process'], [
        PatternSettingTypeBase::class,
        "formGroupProcess",
      ]);
    }
  }

  if (isset($info['pattern'])) {
    $info['pattern']['#pre_render'][] = [
      "Drupal\ui_patterns_settings\Element\PatternSettings",
      "processSettings",
    ];
  }

  if (isset($info['pattern_preview'])) {
    $info['pattern_preview']['#pre_render'][] = [
      "Drupal\ui_patterns_settings\Element\PatternSettings",
      "processPreviewSettings",
    ];
  }

}

/**
 * Implements hook_theme_registry_alter().
 *
 * Add settings variables to the pattern theme.
 */
function ui_patterns_settings_theme_registry_alter(&$theme_registry) {
  foreach (UiPatterns::getManager()->getPatterns() as $pattern) {
    $definition = $pattern->getPluginDefinition();
    if (isset($theme_registry['pattern_' . $definition->id()])) {
      $settings = UiPatternsSettings::getPatternDefinitionSettings($definition);
      foreach ($settings as $key => $setting) {
        $theme_registry['pattern_' . $definition->id()]['variables'][$key] = NULL;
      }
    }
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function ui_patterns_settings_field_group_pre_render_alter(&$element, $group, $rendering_object) {
  $pattern_id = isset($group->format_settings['pattern']) ? $group->format_settings['pattern'] : NULL;
  $element['#settings'] = isset($group->format_settings['pattern_settings'][$pattern_id]) ? $group->format_settings['pattern_settings'][$pattern_id] : NULL;
}

/**
 * Implements hook_layout_alter().
 */
function ui_patterns_settings_layout_alter(&$definitions) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
  foreach ($definitions as $definition) {
    if ($definition->getClass() == '\Drupal\ui_patterns_layouts\Plugin\Layout\PatternLayout') {
      $definition->setClass(PatternSettingsLayout::class);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_patterns_settings_form_entity_view_display_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay $display */
  $display = $form_state->getFormObject()
    ->getEntity();

  $entityFieldManager = \Drupal::service('entity_field.manager');
  $fields = $entityFieldManager->getFieldDefinitions($display->getTargetEntityTypeId(), $display->getTargetBundle());

  $form['ui_patterns_settings'] = [
    '#type' => 'fieldset',
    '#title' => t('Expose UI Pattern Settings and Variants'),
    '#tree' => TRUE,
  ];

  $infos = UiPatternsSettings::getManager()
    ->getExposedInfo(UiPatterns::getManager()->getDefinitions());
  foreach ($infos as $key => $info) {
    /** @var \Drupal\ui_patterns\Definition\PatternDefinition $pattern */
    $pattern = $info['pattern'];
    $form['ui_patterns_settings'][$key] = [
      '#type' => 'fieldset',
      '#title' => $pattern->getLabel(),
    ];
    $form['ui_patterns_settings'][$key]['variant'] = [
      '#type' => 'checkbox',
      '#default_value' => isset($fields['uipv_' . $key . '_variant']),
      '#title' => 'Expose Variants',
    ];
    foreach ($info['settings'] as $setting_key => $setting) {

      $form['ui_patterns_settings'][$key]['settings'][$setting_key] = [
        '#type' => 'checkbox',
        '#default_value' => isset($fields['uips_' . $key . '_' . $setting_key]),
        '#title' => 'Expose ' . $setting->getLabel(),
      ];
    }
  }

  $form['#entity_builders']['ui_patterns_settings'] = '_ui_patterns_settings_entity_view_display_form_entity_builder';
}

/**
 * Entity builder for entity_view_display_edit_form.
 */
function _ui_patterns_settings_entity_view_display_form_entity_builder($entity_type_id, LayoutEntityDisplayInterface $display, &$form, FormStateInterface &$form_state) {
  $pattern_config = $form_state->getValue('ui_patterns_settings', []);
  $display->setThirdPartySetting('ui_patterns_settings', 'exposed_patterns', $pattern_config);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ui_patterns_settings_entity_view_display_update(LayoutEntityDisplayInterface $display) {
  // This function changes config, so bail out immediately during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  $entity_type = $display->getTargetEntityTypeId();
  $bundle = $display->getTargetBundle();

  $exposed_config = $display->getThirdPartySetting('ui_patterns_settings', 'exposed_patterns', []);

  $pattern_definitions = UiPatterns::getPatternDefinitions();
  $variant_field_names = [];
  $setting_field_names = [];
  foreach ($exposed_config as $pattern_id => $config) {

    if (isset($config['variant']) && $config['variant'] === 1) {
      $variant_field_names['uipv_' . $pattern_id . '_variant'] = $pattern_definitions[$pattern_id]->getLabel();
      foreach ($config as $setting_key => $setting_active) {
        if ($setting_active) {
          $setting_field_names[] = 'uips_' . $pattern_id . '_' . $setting_key;
        }
      }
    }
  }
  foreach ($variant_field_names as $field_name => $label) {
    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

    if (!$field_storage) {
      $field_storage = FieldStorageConfig::create([
        'field_name' => $field_name,
        'entity_type' => $entity_type,
        'type' => 'list_string',
      ]);
      $field_storage->setLocked(TRUE);
      $field_storage->setCardinality(1);
      $field_storage->save();
    }

    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);

    if (!$field) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => $bundle,
      ]);
      $field->setLabel($label . ' Variant')
        ->setRequired(TRUE)
        ->setSetting('allowed_values_function', '_ui_patterns_settings_variant_allowed_values');
      $field->save();
    }
  }
}

/**
 *
 */
function _ui_patterns_settings_cleanup_fields($display) {
  $field_is_used = (bool) \Drupal::entityTypeManager()
    ->getStorage($display->getEntityTypeId())
    ->getQuery()
    ->condition('targetEntityType', $display->getTargetEntityTypeId())
    ->condition('bundle', $display->getTargetBundle())
    ->condition('mode', $display->getMode(), '<>')
    ->condition('third_party_settings.layout_library.enable', TRUE)
    ->count()
    ->execute();

  if (!$field_is_used && $field = FieldConfig::loadByName($entity_type, $bundle, $field_name)) {
    $field->delete();
    field_purge_batch(10);

    \Drupal::service('entity_display.repository')
      ->getFormDisplay($entity_type, $bundle, 'default')
      ->removeComponent($field_name)
      ->save();
  }
}

/**
 * Returns
 */
function _ui_patterns_settings_variant_allowed_values($field) {
  $x = $field;
  return ['a' => 'b'];
}
